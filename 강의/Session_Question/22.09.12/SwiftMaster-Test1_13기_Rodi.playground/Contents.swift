import UIKit

/*:
# 앨런 - Swift 마스터 스쿨 13기
*/
/*:
## 첫번째 테스트 (2주차)
---
*/
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)


/**==================================================================
 [1번 문제]
  - 하나의 앱이 실행되면, 메모리는 어떤 4가지 영역으로 나누어 지나요? 4가지 영역의 이름을 쓰세요.
 ===================================================================**/

//코드, 데이터 힙, 스택 입니다.


/**==================================================================
 [2번 문제]
  - 프로그래밍에서, 표현식(Expresstion)이 어떤 의미인가요? 아는대로 작성하세요.
 ===================================================================**/

// 결과값으로 표현되는 코드
// 예) var n = 0 / 문장
// 예) n + 5 / 표현식


/**==================================================================
 [3번 문제]
  -  반복문을 사용해서, 1부터 10까지 값을 더한 결과값을 출력하는 코드를 작성해 보세요.
    (힌트: 변수를 하나 만들고, 해당 변수를 이용 어떤 반복문을 어떻게 사용할지 고민해 보세요.)
 ===================================================================**/

var sum = 0

for i in 1...10 {
  sum += i
}

print(sum)


/**==================================================================
 [4번 문제]
  -  튜플이 뭔가요? 간단한 개념을 1-2줄로 서술 하고, 간단한 코드 예시를 하나 만들어 보세요.
 ===================================================================**/

// 연관된 데이터의 조합
// var twoValue: (Int, String) = (0, "0")


/**==================================================================
 [5번 문제]
  -  구구단을 2단부터, 9단까지 출력하는 코드를 반복문을 사용해서 만들어 보세요.
    (힌트: 어떤게 반복이 되어야 할까요? 구구단에서 반복이 되는 부분이 어디죠?)
 ===================================================================**/

for i in 2...9 {
  for j in 1...9 {
    print("\(i) * \(j) = \(i*j)")
  }
}


/**==================================================================
 [6번 문제]
  - 함수만들어 보기: 여러개의 정해지지 않은 갯수의 정수를 받아서, 평균을 구하는 함수를 작성해 보세요.
    (힌트: 함수의 이름은 누구봐도 알아볼 수 있게, 평균..이란 말이 들어가면 좋겠네요!)
 ===================================================================**/

func average(_ a: Int...) -> Int {
  var n = 0
  for i in a {
    n += i
  }
  return n / a.count
}


/**==================================================================
 [7번 문제]
 - 함수만들어 보기: 2개의 정수를 입력 받아, 그 숫자들을 더한 결과값을 문자열로 반환하는
   함수를 작성해 보세요.
   (힌트: 문자열로 반환하려면, 함수 안에서 변환의 과정이 한번 필요하겠네요.)
 ===================================================================**/

func toString(_ a: Int, _ b: Int) -> String {
  return String( a + b )
}

toString(3, 4)


/**==================================================================
 [8번 문제]
  - 함수의 파라미터에서 사용하는 inout키워드에 대해서, 간단하게 설명해 보세요.
 ===================================================================**/

// 함수 파라미터의 값을 바꿀 수 있다.(let을 var로 바꾸는 느낌)


/**==================================================================
 [9번 문제]
  -  다음의 제어전송문 4가지를 각각 쓰이는 경우와 어떻게 사용되는지 간단하게 설명하세요.
    (break / fallthrough / continue / return)
    (힌트1: break는 2가지 경우에 쓰입니다.)
    (힌트2: return은 리턴타입이 있는 함수/리턴타입이 없는 함수 구분해서, 설명해 주세요.)
 ===================================================================**/

// 1.break문
// switch문, 반복문에서 사용되고 싸이클을 중지하는 역할이다.


// 2.fallthrough문
// switch문에서 사용되고, 해당값과 그 다음값이 무조건적으로 실행된다.


// 3.continue문
// 반복문에서 사용되고, 싸이클을 넘어가서 계속 실행한다.


// 4.return문
// 리턴타입 o - 결과를 리턴하면서 함수를 중지하고 벗어난다.
// 리턴타입 x - 함수를 중지하고 벗어난다.(break랑 비슷한 느낌이다.)




/**==================================================================
 [10번 문제]
  - nil이 뭘까요? 아는대로 설명해 보세요!
 ===================================================================**/

// 실제로 값이 없는 것이 아니라 "값이 없음"을 의미한다.


/**==================================================================
 [11번 문제]
  - Optional 타입에는 .none이 있는데, 이것과 nil의 공통점 또는 차이점은?
 ===================================================================**/

// 공통점은 둘 다 값이 없음을 의미한다.
// 차이점은 .none은 Optional타입중 하나이다.




/**==================================================================
 [12번 문제]
  - Optional을 언래핑(Unrapping) 하는 4가지 방법은? 간단하게 서술로 쓰시면 됩니다.
 ===================================================================**/

// 1번 방법
// ! - 강제추출

// 2번 방법
// if - 만약 값이 있다면 억지로 값을 벗긴다.

// 3번 방법
// if let(guard let) 바인딩 -  변수를 새로 지정하여 우아하게 값을 벗김
// guard문 사용시는 조기종료의 조건이 들어가므로 함수 안에서 사용해야한다.

// 4번 방법
// 닐 코어레싱 - 기본값을 세팅해놨기 때문에 애초에 값이 없을 수가 없다.(삼항연산자 느낌)


/**==================================================================
 [13번 문제]
  - 열거형(Enum)은 어떤 경우에 사용하는 타입인가요? 아는대로 간단하게 서술해 보세요.
 ===================================================================**/

// 한정된 사례를 가지고 케이스를 만들 때 사용하는 타입입니다.


/**==================================================================
 [14번 문제]
 구글(google), 페이스북(facebook), 네이버(naver) 로그인을 위해 SiteLogin라는 이름을 가진
 아래의 Enum 타입을 완성해 보세요.
 
 각 case는 사용자의 아이디(String)와 비밀번호(String)를 위한 연관 값(associated value)을  가집니다.
 
 (만들고자 하는 타입 예시)
 enum SiteLogin { }
 
 (변수에 담았을때의 모습)
 var login1 = SiteLogin.google("google@gmail.com", "0000")
 
  (힌트: 연관값이라는 개념을 어떻게 사용해야 하죠?)
 ===================================================================**/

// 아래의 enum타입 완성

enum SiteLogin {

  case google(String, String)
  case facebook(String, String)
  case naver(String, String)

}


//var login1 = SiteLogin.google("google@gmail.com", "0000")








/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
