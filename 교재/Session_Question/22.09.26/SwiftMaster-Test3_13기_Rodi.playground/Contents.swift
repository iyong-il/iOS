import UIKit

/*:
 # 앨런 - Swift 마스터 스쿨 13기
 */
/*:
 ## 세번째 테스트 (4주차)
 ---
 */
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)

// 꼭 정해진 시간 이외에도 풀어보시는대로 전달해 주시면,
// 제가 대략적으로 실력을 파악하는데 도움이 됩니다. (조언도 드릴 수 있고요!)




/**==================================================================
 [1번 문제]
 - 함수 만들어 보기: 정수값을 한개 받아, 해당 정수가 짝수인지 여부를 판단하는 함수를
 구현해 보세요. (힌트: 짝수 -> 참 / 홀수 -> 거짓)
 
 (함수 실행 예시)
 isEvenNumber(num: 3)    // 거짓
 isEvenNumber(num: 4)    // 참
 ===================================================================**/

// 함수 정의 (구현)
func isEvenNumber(num: Int) -> Bool {
  switch num {
  case let x where x % 2 == 0:
    return true
  case let x where x % 2 != 0:
    return false
  default:
    return false
  }
}
isEvenNumber(num: 5)








// 함수 실행 (아래 주석 제거하고 실행해보기)

print("1번문제 결과 (1):", isEvenNumber(num: 3))
print("1번문제 결과 (2):", isEvenNumber(num: 4))





/**==================================================================
 [2번 문제]
 - Array(배열), Dictionary(딕셔너리), Set(집합)의 각각의 중요 특징과 차이점에 대해
 서술하고 간단한 예시 코드를 작성해 보세요.
 ===================================================================**/

// 1) 배열(Array)
// 데이터를 순서대로 저장하는 컬렉션 (데이터를 받아 화면에 표시할 때)
// var array1 = [1, 2, 3, 4, 1]




// 2) 딕셔너리(Dictionary)
// 데이터를 키와 값으로 하나의 쌍으로 만들어 관리하는 순서가 없는 컬렉션 (데이터를 서버에서 받아올 때)
// var array2 = ["0": "A", "1": "B", "2": "C"]




// 3) 집합(Set)
// 배열과 같은 형태이지만 순서가 없다는 차이점이 있다.(중복된 숫자도 불가하다.)
// var array3 = [1, 2, 3, 4]









/**==================================================================
 [3번 문제]
 - 아래의 personName변수에 들어있는 값을 if let 바인딩으로 언래핑해서 이름을
 출력해 보세요.
 ===================================================================**/

class Person {
  var name: String? = "홍길동"
}

var personName = Person().name


// 옵셔널 바인딩 코드 작성

if let name = personName {
  print(name)
}









/**==================================================================
 [4번 문제]
 - 아래의 a상수의 옵셔널 값을 switch문으로 이용해서 꺼내서 출력해 보세요.
 (힌트. some과, none 그리고, 연관값을 꺼내는 방법을 이용해 보세요.)
 ===================================================================**/


let a: Int? = 7


// (주석 해제하고) 나머지 전부 구현

switch a {
case .some(let x):
  print(x)
case .none:
  print(0)
}





/**==================================================================
 [5번 문제]
 - 클래스나 구조체에서 initializer(생성자)의 역할이 무엇인가요? 간단하게 서술하세요.
 ===================================================================**/

// 저장속성의 초기화를 통한 인스턴스 생성이다.










/**==================================================================
 [6번 문제]
 - 구조체의 멤버와이즈 이니셜라이저(생성자)가 무엇인가요? 개념에 대해 간단하게
 서술하고, (자유롭게) 예제 코드를 만들어 설명해주세요.
 (힌트. Memberwise (멤버에 관한))
 ===================================================================**/

// 저장속성에 기본값이 있더라도 자동으로 생성자를 만들어주는 것이다. (구조체 내부에 생성자를 구현하면 제공되지 않는 기능이다.)












/**==================================================================
 [7번 문제]
 - 클래스와 구조체의 근본적인 메모리 구조의 차이점에 대해서, 간단하게 설명해주세요.
 (힌트. Heap(힙)과 Stack(스택)을 참고적으로)
 ===================================================================**/

// 힙은 전체적으로 한번 스캔 후 비어있는 공간에 저장을 하고,
// 스택은 밑에서부터 차례대로 쌓아 저장한다.
// 스캔의 과정이 없는 스택이 힙보다는 빠르다.
// 저장방식에 대해서만 이해는 힙 == 딕셔너리, 스택 == 배열 이라고 이해했습니다.








/**==================================================================
 [8번 문제]
 - 클래스(또는 구조체)에서 계산 속성의 의미가 뭔가요?
 - 아래의 Person2 구조체에서 bmi라는 계산 속성을 구현해서, 쉽게 사람의 BMI를 계산하고
 값을 얻을 수 있게 구현해 보세요.
 (읽기/ 쓰기 속성을 모두 구현해 보세요)
 
 BMI지수 = 몸무게 / 키 x 키         (몸무게를 키의 제곱으로 나눈 값이 BMI)
 (kg기준) (키는 미터 기준)
 
 ===================================================================**/

struct Person2 {
  var name: String = "사람"
  var height: Double = 160.0
  var weight: Double = 60.0

  var bmi: Double {
    let bmi1 = self.weight / ( self.height * self.height )
    return bmi1
  }
}



// (계산 속성에 대한) 간단한 서술
// (계산속성의 의미, 역할, 필요한 이유 등을 간단하게)
// 계산속성은 말그대로 저장속성을 계산할 수 있게 만들어주는 속성인데 실질적으로는 메서드이다.(메모리 공간을 가지지않는다.)
// 사용하는 이유는 관련된 두가지의 메서드를 한번엔 구현할 수 있기 때문에 가독성 측면에서도 좋기 때문이다.







/**==================================================================
 [9번 문제]
 - 클래스(또는 구조체)에서 속성 감시자의 의미가 뭔가요?
 - 아래의 Profile 클래스에서 message의 변수(속성)에 didSet 속성감시자를 구현해보세요.
 (didSet에서 아래의 메세지를 출력해 보세요.)
 
 print("메세지 - \(여기에뭘써야하죠)에서 \(message)로 변경됨")
 
 위의 문장을 복사해서 사용하세요.
 ===================================================================**/


class Profile {
  var message: String = "기본메세지" {
    didSet {
      print("\(oldValue)에서 \(message)로 변경됨")
    }
  }


}




var p1 = Profile()

p1.message
p1.message = "행복하다"
p1.message




/**==================================================================
 [10번 문제]
 - 값타입(Value Type)과 참조타입(Reference Type)에 대해 아는대로 서술하고
 차이점에 대해서 설명해 보세요.
 ===================================================================**/


// 1) 값타입(Value Type)
//  클래스와 클로저를 제외한 거의 모든 타입?(스택에 저장)




// 2) 참조타입(Reference Type)
// 해당값을 가지고 있는 것이 아니고 메모리 주소를 가지고 있는 타입(힙에 저장)







/**==================================================================
 [11번 문제]
 - 객체지향 프로그래밍(OOP)의 4대 특징에 대해 나열하고, 간단하게 서술하세요.
 ===================================================================**/


// 캡슐화, 상속성, 추상화, 다형성
// 공부하겠습니다.














/**==================================================================
 [12번 문제]
 - 아래의 코드 예제에서, Bclass는 Aclass를 상속하고 있습니다. Bclass의 저장속성인
 z를 고려해서, Bclass의 지정생성자를 한개이상 구현하고, 상위(Aclass)의 지정생성자
 (init(x: Int, y: Int))를 편의생성자로 재정의 해보세요.
 (자유롭게 구현해보세요.)
 ===================================================================**/


class Aclass {
  var x: Int
  var y: Int

  init(x: Int, y: Int) {
    self.x = x
    self.y = y
  }

  convenience init() {
    self.init(x: 0, y: 0)
  }
}



// 아래의 주석을 제거하고 코드를 구현

class Bclass: Aclass {

  var z: Int

  init(z: Int) {
    self.z = z
    super.init(x: 3, y: 3)
  }
  // 이 부분에 지정생성자 및 편의 생성자(상위의 지정생성자를 재정의해서) 구현

  override convenience init (x: Int, y: Int) {
    self.init(z: 4)
    self.x = x
    self.y = y
  }

}





/**==================================================================
 [13번 문제]
 - Singleton패턴이 무엇인가요? 아는 대로 간단하게 서술하고, (자유롭게) 간단한 예제 코드를
 작성해 보세요.
 ===================================================================**/


// 메모리상에 유일하게 한개만 존재하는 객체를 만드는 방식?
// 공부하겠습니다.











/**==================================================================
 [14번 문제]
 - 클래스의 타입 메서드의 구현에서, static 키워드와 class 키워드의 차이는 뭔가요?
 간단하게 서술하세요.
 ===================================================================**/


// class는 상속시 재정의가 가능하다.











/**==================================================================
 [15번 문제]
 - mutating키워드가 뭔가요? 언제 사용했었죠? mutating키워드에 대해서 아는 대로
 간단하게 서술해 보세요.
 ===================================================================**/


// 구조체에서 저장속성을 변경하는 메서드를 만들 때 사용한다.(저장속성은 고유한 메모리값을 가지고 있기 때문에 변경할 수 없다.)












/**==================================================================
 [16번 문제]
 - 아래에서, SomeSuperclass를 상속한 SomeSubclass에서.. 상위 클래스의
 aValue속성을 계산속성으로 자유롭게 재정의 해보세요.
 (계산 속성으로 재정의시 내부 구현은 자유입니다.)
 ===================================================================**/


class SomeSuperclass {
  var aValue = 0
}



class SomeSubclass: SomeSuperclass {

  var bValue: Int = 4

  override var aValue: Int {
    get {
      return 3
    }
    set {
      bValue = newValue * 4
    }
  }
  // 계산속성으로 재정의 구현
}

let cc = SomeSubclass()
cc.aValue = 4
cc.bValue










/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
