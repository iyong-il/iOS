import UIKit

/*:
# 앨런 - Swift 마스터 스쿨 13기
*/
/*:
## 여섯번째 테스트 (7주차)
---
*/
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)

// 꼭 정해진 시간 이외에도 풀어보시는대로 전달해 주시면,
// 제가 대략적으로 실력을 파악하는데 도움이 됩니다. (조언도 드릴 수 있고요!)




/**==================================================================
 [1번 문제]
  - 클래스(Class)와 구조체(Struct)의 차이점은? 가장 중요한 차이점 위주로 간단하게
    서술하세요.
 ===================================================================**/

// 메모리의 저장되는 공간이 다릅니다.
// 클래스 - 힙에 저장(레퍼런스 타입)
// 구조체 - 스택에 저장(값 타입)









/**==================================================================
 [2번 문제]
  - 아래의 코드 예제에서, Bclass는 Aclass를 상속하고 있습니다. Bclass의 저장속성인
    z를 고려해서, Bclass의 지정생성자를 한개이상 구현하고, 상위(Aclass)의 지정생성자
    (init(x: Int, y: Int))를 "지정생성자"(⭐️)로 재정의 해보세요.
    (편의생성자 아님! 내부는 자유롭게 구현해보세요.)
 ===================================================================**/


class Aclass {
    var x: Int
    var y: Int
    
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
    
    convenience init() {
        self.init(x: 0, y: 0)
    }
}



// 아래의 주석을 제거하고 코드를 구현

class Bclass: Aclass {

    var z: Int

    // 이 부분에 지정생성자를 2개 (상위의 지정생성자를 재정의한 것 포함) 구현
  init(x: Int, y: Int, z: Int) {
    self.z = z
    super.init(x: x, y: y)
  }

  override convenience init(x: Int, y: Int) {
    self.init(x: x, y: y, z: 0)
  }


}




/**==================================================================
 [3번 문제]
  - 아래 Hero 클래스가 구현되어 있습니다. 해당 Hero클래스는 이름(name)과 아이디(id)로
    인스턴스를 생성할 수 있는데, 해당 클래스를 확장(Extension)해서,
    이름만으로도 인스턴스를 생성할 수 있는.. (확장에서) 생성자를 구현하세요.
    (아이디는 0으로 셋팅되도록 구현하시면 됩니다.)
    (힌트. 확장에서, 생성자의 구현에서, 주의할점은...?)
 ===================================================================**/



class Hero {
    var name: String
    var id: Int
    
    init(name: String, id: Int) {
        self.name = name
        self.id = id
    }
}

extension Hero {
    // 이 부분을 이름만 가지고 생성할 수 있는 생성자로 구현 하세요.

  convenience init(name: String) {
    self.init(name: name, id: 0)
  }

    
    
    
}


var hero1 = Hero(name: "아이언맨", id: 0)
var hero2 = Hero(name: "캡틴아메리카", id: 1)
var hero3 = Hero(name: "헐크", id: 2)



// 위의 확장에서, 생성자를 제대로 구현하면 아래의 코드가 사용 가능해 집니다.
var hero4 = Hero(name: "토르")
var hero5 = Hero(name: "스파이더맨")



/**==================================================================
 [4번 문제]
  - Any와 AnyObject타입의 차이는 뭔가요? 아는대로 간단하게 서술하세요.
 ===================================================================**/

// Any는 모든 타입을 가리키는 말로
// 배열의 경우
//let array: [Any] = [1, "sdsd", 1.0, 2.3423534523423, true]
// 이렇게 여러 타입을 넣을 수 있습니다. (인스턴스도 넣을 수 있습니다.)
// 사용시에는 타입캐스팅을 사용해서 써야 하기 때문에 이러한 단점이 있습니다.

// Anyobject의 경우에는 프로토콜의 타입으로 클래스 전용이라는 뜻입니다.








/**==================================================================
 [5번 문제]
  - 아래의 조건을 만족하는 RemoteControl 프로토콜의 구현을 완성해 보세요.
    (조건)
    (1) name 속성(타입: String)을 요구사항으로 선언
        (최소한의 요구사항은 읽기 속성 강제하기)
    (2) turnOn 메서드를 요구사항으로 선언
        (input: 없음, output: Bool)
    (3) turnOff 메서드를 요구사항으로 선언
        (input: (num: Int), output: Bool)
 ===================================================================**/

// RemoteControl 프로토콜
protocol RemoteControl {
    // 이 내부의 코드를 완성하시면 됩니다.
  var name: String { get }

  func turnOn() -> Bool
  func turnOff(num: Int) -> Bool
    
    
}







/**==================================================================
 [6번 문제]
  - 프로토콜(Protocol)의 확장(Extension)이 어떤 개념인가요? 아는대로 간단하게 서술하세요.
 ===================================================================**/

// 프로토콜은 속성과 메서드의 요구사항만 넣어 구현하는데
// 확장을 하면 구체적인 실행문도 넣을 수 있습니다.
// 프로토콜을 채택한 클래스, 구조체가 모두 같은 속성과 메서드를 사용한다면 따로 구현할 필요가 없어집니다.










/**==================================================================
 [7번 문제]
  - 고차함수를 사용해서, 아래 array배열에서, 5보다 큰 짝수를 뽑아내세요. 해당 뽑아낸
    숫자들을 evenNumbersArray 변수에 담으면 됩니다.
    (힌트. 고차함수 두번 사용 가능)
 ===================================================================**/

let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]


// 아래, array 배열에 고차함수 사용하는 코드 완성하세요.
var evenNumbersArray = array.filter { $0 > 5 && $0 % 2 == 0 }




// 이 코드는 출력(확인)을 위한 코드 입니다.
print(evenNumbersArray)






/**==================================================================
 [8번 문제]
  - 아래 Student구조체가 정의되어 있고, 해당 구조체의 인스턴스를 담고 있는
    someMembers 배열이 있습니다. someMembers 배열에서, 고차함수 방식을 이용해서
    친구의 이름이 "아이브"를 가진 멤버만 뽑아내서, 출력을 해보세요.
 
  - 힌트. (1) someMembers.고차함수 사용  (2) contains 메서드
 
  - 고차함수로 잘 완성을 했다면, 그 아래 newMembers.map { print($0.name) }
    이 부분을 통해서, "잡스", "팀쿡" 이 두명의 이름을 정상적으로 출력을 할 수 있습니다.
 ===================================================================**/


struct Student {
    let name: String
    let studentId: Int
    let friendsName: [String]
}


let someMembers: [Student] = [
    Student(name: "잡스", studentId: 0, friendsName: ["팀쿡", "아이브"]),
    Student(name: "팀쿡", studentId: 0, friendsName: ["잡스", "아이브"]),
    Student(name: "주커버그", studentId: 0, friendsName: ["빌게이츠", "마이클"]),
    Student(name: "베조스", studentId: 0, friendsName: ["빌게이츠", "존"])
]



// 아래, someClassMembers 배열에 고차함수 사용하는 코드 완성하세요.
var newMembers = someMembers.filter { $0.friendsName.contains("아이브") }



// 이 코드는 출력(확인)을 위한 코드 입니다.
newMembers.map { print($0.name) }

// 잡스
// 팀쿡



/**==================================================================
 [9번 문제]
  - 반복문에서 for문 대신에 map, filter, reduce 를 사용할 수 있습니다. 각각을
    간단하게 설명해 보세요.
 ===================================================================**/

// 1) map
// 기존의 배열에 동일하게 어떠한 것을 적용시켜서 새로운 배열을 리턴할 때 사용합니다.


// 2) filter
// true를 만족하는 요소를 걸러내서 새로운 배열을 리턴할 때 사용합니다.


// 3) reduce
//  배열의 모든 요소들을 결합해서 마지막 값을 리턴할 때 사용합니다.





/**==================================================================
 [10번 문제]
  - 클로저가 뭔가요? 간단한 개념을 설명하고, 클로저에서 강한순환참조(Strong Reference Cycle)
    를 방지할려면 어떻게 해야 하나요?
 ===================================================================**/

// 클로저는 이름없는 함수로 클래스와 같이 레퍼런스 타입입니다.
// 강한순환참조를 방지하기 위해선 약하게 가리키면 되는데 그 뜻은 클로저의 파라미터를 적는 부분에 [weak self]를 적어주면 됩니다.









/**==================================================================
 [11번 문제]
  - 스위프트의 메모리 관리 모델인 ARC(Automatic Reference Counting) 시스템은
    무엇을 의미하나요? 아는대로 간단하게 서술하세요.
 ===================================================================**/

// 개발자들이 실수로 순환참조되는 것을 놓칠 수가 있는데
// 그것을 스위프트가 가리키는 레퍼런스를 카운팅 해서 0이 되는지 되지 않고 메모리에 계속 남아있는지 알려주는 시스템입니다.
// 직접적으로 어디가 순환참조가 되는지를 알려주는 것은 아니고 말 그대로 카운팅만 해줍니다.









/**==================================================================
 [12번 문제]
  - HTTP프로토콜이 뭔가요? 아는대로 간단하게 서술하세요.
 ===================================================================**/

// HTML문서 같은 리소스들을 가져올 수 있게 해주는 프로토콜입니다.










/**==================================================================
 [13번 문제]
  - 동시성(Concurrency) 프로그래밍이 왜 필요한가요? 간단한 이유를 서술하세요.
 ===================================================================**/

// 멀티태스킹을 위해서 필요합니다.









/**==================================================================
 [14번 문제]
  - GCD Queue(대기열)가 뭔가요? 아는대로 간단하게 서술하세요.
    (힌트. Thread 쓰레드)
 ===================================================================**/

// 애플이 만들어놓은 것으로 알아서 각기 다른 큐로 넣어주는 것입니다.








/**==================================================================
 [15번 문제]
  - GCD Queue의 종류는 어떤게 있나요? 아는대로 서술하세요.
 ===================================================================**/

// 메인큐, 글로벌큐, ... 이렇게 세가지로 알고 있습니다.
// 메인큐 - 오직 한개만 존재하고, 직렬성을 가지며, UI적인 내용은 메인큐에서 담당합니다.
// 글로벌큐 - 동시성을 가지고, 순서가 중요하지 않은 일은 글로벌큐로 보내면 좋습니다.









/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
